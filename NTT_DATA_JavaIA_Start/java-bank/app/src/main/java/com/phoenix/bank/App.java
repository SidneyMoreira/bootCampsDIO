/*
 * This source file was generated by the Gradle 'init' task
 */
package com.phoenix.bank;

import com.phoenix.bank.exception.AccountNotFoundException;
import com.phoenix.bank.exception.NotFoundsEnoughException;
import com.phoenix.bank.repository.AccountRepository;
import com.phoenix.bank.repository.InvestimentRepository;
import java.util.Arrays;
import java.util.Scanner;
import static java.time.format.DateTimeFormatter.ISO_DATE_TIME;

public class App {

    private final static AccountRepository accountRepository = new AccountRepository();
    private final static InvestimentRepository investmentRepository = new InvestimentRepository();

    static Scanner scanner = new Scanner(System.in);

    public String getGreeting() {
        return "Hello!! Welcome to Phoenix Bank";
    }

    public static void main(String[] args) {
        
        int option;
        while (true) {
            System.out.println("===== Phoenix Bank Menu =====");
            System.out.println("1. Create Account");
            System.out.println("2. Create Investment");
            System.out.println("3. Make Investment");
            System.out.println("4. Deposit Account");
            System.out.println("5. Withdraw Account");
            System.out.println("6. Transfer Account");
            System.out.println("7. Invest");
            System.out.println("8. Withdraw Investment");
            System.out.println("9. List Accounts");
            System.out.println("10. List Investments");
            System.out.println("11. List Investments Wallets");
            System.out.println("12. Update Investments");
            System.out.println("13. History Account");
            System.out.println("0. Exit");
            System.out.print("Select an option: ");

            option = scanner.nextInt();
            scanner.nextLine(); // consume newline

            switch (option) {
                case 1 -> createAccount();
                case 2 -> createInvestment();
                case 3 -> createWalletInvestment();
                case 4 -> deposit();
                case 5 -> withdraw();
                case 6 -> transferToAccount();
                case 7 -> investiment();
                case 8 -> rescueInvestment();
                case 9 -> accountRepository.list().forEach(System.out::println);
                case 10 -> investmentRepository.listInvestments().forEach(System.out::println);
                case 11 -> investmentRepository.listWallets().forEach(System.out::println);
                case 12 -> {
                    investmentRepository.updateAmount();
                    System.out.println("Investment amounts updated.");
                }
                case 13 -> checkHistory();
                case 0 -> System.exit(0);
                default -> System.out.println("Invalid option!");
            }
        }
    }

    private static void createAccount() {
        System.out.println("Enter the pix keys separated by \";\"");
        var pix = Arrays.stream(scanner.next().split(";"))
                .toList();
        System.out.println("Enter initial funds amount:");
        var amount = scanner.nextLong();
        var wallet = accountRepository.create(pix, amount);
        System.out.println("Account created successfully!" + wallet );
    }

    private static void createInvestment() {
        System.out.println("Enter the tax investment: ");
        var tax = scanner.nextInt();

        System.out.println("Enter initial funds amount:");
        var initialFunds = scanner.nextLong();
        var investiment = investmentRepository.create(tax, initialFunds);
        System.out.println("Investment created successfully!" + investiment);
    }

    private static void deposit() {
        System.out.println("Enter the key PIX:");
        var pix = scanner.next();

        System.out.println("Enter the amount to deposit:");
        var amount = scanner.nextLong();
        try {
            accountRepository.deposit(pix, amount);
        } catch (NotFoundsEnoughException | AccountNotFoundException e) {
            System.out.println(e.getMessage());
        } 
        System.out.println("Deposit of " + amount + " to account " + pix + " completed successfully!");
    }

    private static void withdraw() {
        System.out.println("Enter the key PIX:");
        var pix = scanner.next();

        System.out.println("Enter the amount to withdraw:");
        var amount = scanner.nextLong();
        try {
            accountRepository.withdraw(pix, amount);
        } catch (AccountNotFoundException e) {
            System.out.println(e.getMessage());
        }
        System.out.println("Withdrawal of " + amount + " from account " + pix + " completed successfully!");
    }

    private static void transferToAccount() {
        System.out.println("Enter the key PIX orgin Account:");
        var source = scanner.next();

        System.out.println("Enter the key PIX destination Account:");
        var target = scanner.next();

        System.out.println("Enter the amount to transfer:");
        var amount = scanner.nextLong();
        try {
            accountRepository.transferMoney(source, target, amount);
        } catch (NotFoundsEnoughException | AccountNotFoundException e) {
            System.out.println(e.getMessage());
        } 
        System.out.println("Transfer of " + amount + " from account " + source + " to account " + target + " completed successfully!");
    }

    private static void createWalletInvestment() {
        System.out.println("Enter the key PIX of Account:");
        var pix = scanner.next();
        var account = accountRepository.findByPix(pix);
        System.out.println("Enter the ID of Investment:");
        var investmentId = scanner.nextLong();
        var investmentWallet = investmentRepository.initInvestment(account, investmentId);
        System.out.println("Investment Wallet created successfully!" + investmentWallet);        
    }

    private static void investiment() {
        System.out.println("Enter the key PIX of Account Investment:");
        var pix = scanner.next();
        System.out.println("Enter the amount to invest:");
        var amount = scanner.nextLong();
        try {
            investmentRepository.deposit(pix, amount);
            System.out.println("Investment of " + amount + " from account " + pix + " completed successfully!");
        } catch (NotFoundsEnoughException | AccountNotFoundException e) {
            System.out.println(e.getMessage());
        } 
    }

    private static void rescueInvestment() {
        System.out.println("Enter the key PIX of Account for rescue investment:");
        var pix = scanner.next();

        System.out.println("Enter the amount to withdraw:");
        var amount = scanner.nextLong();
        try {
            investmentRepository.withdraw(pix, amount);
        } catch (AccountNotFoundException e) {
            System.out.println(e.getMessage());
        }
        System.out.println("Withdrawal of " + amount + " from account " + pix + " completed successfully!");
    }

    public static void checkHistory() {
        System.out.println("Enter the key PIX of Account to check history:");
        var pix = scanner.next();
        try {
            var sortedHistory = accountRepository.getHistory(pix);
            sortedHistory.forEach((k, v) -> {
                System.out.println("Date: " + k.format(ISO_DATE_TIME) + ", Transactions: " + v);
                System.out.println(v.getFirst().transactionId());
                System.out.println(v.getFirst().description());
                System.out.println("R$" + (v.size() / 100) + "," + (v.size() % 100));
            });
        } catch (AccountNotFoundException e) {
            System.out.println(e.getMessage());
            return;
        }
    }
}